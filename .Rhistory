city_occurences <- as.data.frame(table(dataset$city)) %>% arrange(Freq)
dataset$urbanness <- match(dataset$city, city_occurences$Var1)
dataset <- dataset[,-which(colnames(dataset) %in% c("street", "statezip", "city", "country"))]
View(dataset)
class(dataset$date)
substr(
"12345",1,5
)
dataset <- read.csv("./data.csv") %>% na.omit
#the two most expensive houses and the least expensive house are weird outliers
#should be omitted
#indices are 4351, 4347, 4352
dataset <- dataset[c(-4351, -4347, -4352)]
dataset <- dataset %>% dplyr::filter(price > 0)
city_occurences <- as.data.frame(table(dataset$city)) %>% arrange(Freq)
dataset$urbanness <- match(dataset$city, city_occurences$Var1)
dataset$date <- substr(dataset$date, 1,4)
dataset <- dataset[,-which(colnames(dataset) %in% c("street", "statezip", "city", "country"))]
View(dataset)
dataset <- read.csv("./data.csv") %>% na.omit
#the two most expensive houses and the least expensive house are weird outliers
#should be omitted
#indices are 4351, 4347, 4352
dataset <- dataset[c(-4351, -4347, -4352)]
dataset <- dataset %>% dplyr::filter(price > 0)
city_occurences <- as.data.frame(table(dataset$city)) %>% arrange(Freq)
dataset$urbanness <- match(dataset$city, city_occurences$Var1)
dataset$date <- strtoi(substr(dataset$date, 1,4))
dataset <- dataset[,-which(colnames(dataset) %in% c("street", "statezip", "city", "country"))]
View(dataset)
class(dataset$date)
#price is heavily skewed, log(price) provides better results
#estimated prediction can then be passed into exp() to give final price prediction
#values are on different scales, normalizing is appropriate
#yr_renovated is not a signficant predictor
#yr_built is not a significant predictor
#sqft_basement is omitted for simplicity's sake. Will figure out how to deal with this later if possible.
#sqft_lot an insignificant predictor
#condition should be transformed into categorical variable instead
#ifelse(condition < 3, 0, 1)
model.data <- as.data.frame(apply(dataset, 2, normalize))
model.data$price <- dataset$price
model.data <- model.data %>%
mutate(price = log(price),
condition = ifelse(condition < 0.6, 0, 1),
bedrooms = -1*bedrooms*bedrooms)
plot(dataset$date, log(dataset$price))
plot(normalize(dataset$bedrooms),
log(dataset$price))
plot(normalize(dataset$bathrooms),
log(dataset$price))
plot(normalize(dataset$sqft_living),
log(dataset$price))
plot(normalize(dataset$sqft_basement),
log(dataset$price))
plot(normalize(dataset$sqft_lot),
log(dataset$price))
plot(normalize(dataset$sqft_above),
log(dataset$price))
plot(normalize(dataset$floors),
log(dataset$price))
plot(normalize(ifelse(dataset$condition < 3, 0, 1)),
log(dataset$price))
plot(normalize(dataset$yr_built),
log(dataset$price))
plot(normalize(dataset$urbanness),
log(dataset$price))
plot(normalize(dataset$waterfront),
log(dataset$price))
plot(normalize(dataset$view),
log(dataset$price))
View(dataset)
plot(normalize(dataset$date),
log(dataset$price))
dataset <- read.csv("./data.csv") %>% na.omit
#the two most expensive houses and the least expensive house are weird outliers
#should be omitted
#indices are 4351, 4347, 4352
dataset <- dataset[c(-4351, -4347, -4352)]
dataset <- dataset %>% dplyr::filter(price > 0)
city_occurences <- as.data.frame(table(dataset$city)) %>% arrange(Freq)
dataset$urbanness <- match(dataset$city, city_occurences$Var1)
dataset$date <- strtoi(substr(dataset$date, 1,4))
dataset <- dataset[,-which(colnames(dataset) %in% c("street", "statezip", "city", "country"))]
# hist(
#   normalize(log(dataset$price)),
#   main = "Histogram of log(price)",
#   xlab = "log(price) range"
# )
hist(
log(dataset$price),
main = "Histogram of log(price)",
xlab = "log(price) range"
)
hist(
dataset$bedrooms,
main = "Histogram of # of bedrooms",
xlab = "# of bedrooms range"
)
hist(
dataset$bathrooms,
main = "Histogram of # of bathrooms",
xlab = "# of bathrooms range"
)
hist(
dataset$sqft_living,
main = "Histogram of square foot of living",
xlab = "squre foot of living range"
)
hist(
dataset$sqft_lot,
main = "Histogram of square foot of lot",
xlab = "squre foot of lot range"
)
hist(
dataset$floors,
main = "Histogram of # of floors",
xlab = "# of floors range"
)
hist(
dataset$condition,
main = "Histogram of condition rating",
xlab = "condition rating range"
)
hist(
dataset$sqft_above,
main = "Histogram of square foot above",
xlab = "squre foot above range"
)
hist(
dataset$sqft_basement,
main = "Histogram of square foot of basement",
xlab = "squre foot of basement range"
)
hist(
dataset$yr_built,
main = "Histogram of year built",
xlab = "year built range"
)
hist(
dataset$yr_renovated,
main = "Histogram of year renovated",
xlab = "year renovated range"
)
hist(
sqrt(dataset$urbanness),
main = "Histogram of urbanness",
xlab = "urbanness range"
)
plot(normalize(dataset$date),
log(dataset$price))
plot(normalize(dataset$bedrooms),
log(dataset$price))
plot(normalize(dataset$bathrooms),
log(dataset$price))
plot(normalize(dataset$sqft_living),
log(dataset$price))
plot(normalize(dataset$sqft_basement),
log(dataset$price))
plot(normalize(dataset$sqft_lot),
log(dataset$price))
plot(normalize(dataset$sqft_above),
log(dataset$price))
plot(normalize(dataset$floors),
log(dataset$price))
plot(normalize(ifelse(dataset$condition < 3, 0, 1)),
log(dataset$price))
plot(normalize(dataset$yr_built),
log(dataset$price))
plot(normalize(dataset$urbanness),
log(dataset$price))
plot(normalize(dataset$waterfront),
log(dataset$price))
plot(normalize(dataset$view),
log(dataset$price))
hist(
dataset$price,
main = "Histogram of log(price)",
xlab = "log(price) range"
)
hist(
dataset$bedrooms,
main = "Histogram of # of bedrooms",
xlab = "# of bedrooms range"
)
hist(
dataset$bathrooms,
main = "Histogram of # of bathrooms",
xlab = "# of bathrooms range"
)
hist(
dataset$sqft_living,
main = "Histogram of square foot of living",
xlab = "squre foot of living range"
)
hist(
dataset$sqft_lot,
main = "Histogram of square foot of lot",
xlab = "squre foot of lot range"
)
hist(
dataset$floors,
main = "Histogram of # of floors",
xlab = "# of floors range"
)
hist(
dataset$condition,
main = "Histogram of condition rating",
xlab = "condition rating range"
)
hist(
dataset$sqft_above,
main = "Histogram of square foot above",
xlab = "squre foot above range"
)
hist(
dataset$sqft_basement,
main = "Histogram of square foot of basement",
xlab = "squre foot of basement range"
)
hist(
dataset$yr_built,
main = "Histogram of year built",
xlab = "year built range"
)
hist(
dataset$yr_renovated,
main = "Histogram of year renovated",
xlab = "year renovated range"
)
hist(
sqrt(dataset$urbanness),
main = "Histogram of urbanness",
xlab = "urbanness range"
)
hist(
log(dataset$price),
main = "Histogram of log(price)",
xlab = "log(price) range"
)
plot(normalize(dataset$bedrooms),
log(dataset$price))
plot(normalize(dataset$bathrooms),
log(dataset$price))
plot(normalize(dataset$sqft_living),
log(dataset$price))
plot(normalize(dataset$sqft_basement),
log(dataset$price))
plot(normalize(dataset$sqft_lot),
log(dataset$price))
plot(normalize(dataset$sqft_above),
log(dataset$price))
plot(normalize(dataset$floors),
log(dataset$price))
plot(normalize(ifelse(dataset$condition < 3, 0, dataset$condition)),
log(dataset$price))
plot(normalize(dataset$yr_built),
log(dataset$price))
plot(normalize(dataset$urbanness),
log(dataset$price))
plot(normalize(dataset$waterfront),
log(dataset$price))
plot(normalize(dataset$view),
log(dataset$price))
hist(
ifelse(dataset$condition < 3, 0, dataset$condition),
main = "Histogram of square foot above",
xlab = "squre foot above range"
)
hist(
ifelse(dataset$condition < 3, 0, dataset$condition-2),
main = "Histogram of square foot above",
xlab = "squre foot above range"
)
dataset <- read.csv("./data.csv") %>% na.omit
library(tidyverse)
dataset <- read.csv("./data.csv") %>% na.omit
city_occurences <- as.data.frame(table(dataset$city)) %>% arrange(Freq)
dataset$urbanness <- match(dataset$city, city_occurences$Var1)
dataset <- dataset[,-which(colnames(dataset) %in% c("date", "street",
"statezip",
"city", "country"))]
#for later in case we want to normalize
normalize <- function(x, ...) {
return((x - min(x, ...)) /(max(x, ...) - min(x, ...)))
}
hist(
dataset$price,
main = "Histogram of log(price)",
xlab = "log(price) range"
)
hist(
dataset$bedrooms,
main = "Histogram of # of bedrooms",
xlab = "# of bedrooms range"
)
hist(
dataset$bathrooms,
main = "Histogram of # of bathrooms",
xlab = "# of bathrooms range"
)
hist(
dataset$sqft_living,
main = "Histogram of square foot of living",
xlab = "squre foot of living range"
)
hist(
dataset$sqft_lot,
main = "Histogram of square foot of lot",
xlab = "squre foot of lot range"
)
hist(
dataset$floors,
main = "Histogram of # of floors",
xlab = "# of floors range"
)
hist(
dataset$condition,
main = "Histogram of condition rating",
xlab = "condition rating range"
)
hist(
dataset$sqft_above,
main = "Histogram of square foot above",
xlab = "squre foot above range"
)
hist(
dataset$sqft_basement,
main = "Histogram of square foot of basement",
xlab = "squre foot of basement range"
)
hist(
dataset$yr_built,
main = "Histogram of year built",
xlab = "year built range"
)
hist(
dataset$yr_renovated,
main = "Histogram of year renovated",
xlab = "year renovated range"
)
hist(
sqrt(dataset$urbanness),
main = "Histogram of urbanness",
xlab = "urbanness range"
)
hist(
dataset$price,
main = "Histogram of price",
xlab = "price range"
)
hist(
dataset$bedrooms,
main = "Histogram of # of bedrooms",
xlab = "# of bedrooms range"
)
hist(
dataset$bathrooms,
main = "Histogram of # of bathrooms",
xlab = "# of bathrooms range"
)
hist(
dataset$sqft_living,
main = "Histogram of square foot of living",
xlab = "squre foot of living range"
)
hist(
dataset$sqft_lot,
main = "Histogram of square foot of lot",
xlab = "squre foot of lot range"
)
hist(
dataset$floors,
main = "Histogram of # of floors",
xlab = "# of floors range"
)
hist(
dataset$condition,
main = "Histogram of condition rating",
xlab = "condition rating range"
)
hist(
dataset$sqft_above,
main = "Histogram of square foot above",
xlab = "squre foot above range"
)
hist(
dataset$sqft_basement,
main = "Histogram of square foot of basement",
xlab = "squre foot of basement range"
)
hist(
dataset$yr_built,
main = "Histogram of year built",
xlab = "year built range"
)
hist(
dataset$yr_renovated,
main = "Histogram of year renovated",
xlab = "year renovated range"
)
hist(
sqrt(dataset$urbanness),
main = "Histogram of urbanness",
xlab = "urbanness range"
)
hist(
log(dataset$price),
main = "Histogram of log(price)",
xlab = "log(price) range"
)
hist(
ifelse(dataset$condition < 3, 0, dataset$condition-2),
main = "Histogram of square foot above",
xlab = "squre foot above range"
)
dataset <- dataset[c(-4351, -4347, -4352)]
dataset <- dataset %>% dplyr::filter(price > 0)
plot(normalize(dataset$bedrooms),
log(dataset$price))
plot(normalize(dataset$bathrooms),
log(dataset$price))
plot(normalize(dataset$sqft_living),
log(dataset$price))
plot(normalize(dataset$sqft_basement),
log(dataset$price))
plot(normalize(dataset$sqft_lot),
log(dataset$price))
plot(normalize(dataset$sqft_above),
log(dataset$price))
plot(normalize(dataset$floors),
log(dataset$price))
plot(normalize(ifelse(dataset$condition < 3, 0, dataset$condition)),
log(dataset$price))
plot(normalize(dataset$yr_built),
log(dataset$price))
plot(normalize(dataset$urbanness),
log(dataset$price))
plot(normalize(dataset$waterfront),
log(dataset$price))
plot(normalize(dataset$view),
log(dataset$price))
model.data.train <- sample(model.data, 0.8*nrow(model.data))
sample(c(1,2,3,4,5), 4)
0.8*nrow(model.data)
sample(model.data, 2)
model.data.train <- mode.data[sample(nrow(model.data), 0.8*nrow(model.data))]
model.data.train <- model.data[sample(nrow(model.data), 0.8*nrow(model.data))]
model.data.train <- model.data[sample(nrow(model.data), 0.8*nrow(model.data)),]
model.data.test <- model.data[sample(nrow(model.data), 0.2*nrow(model.data)),]
View(model.data)
View(model.data.train)
model = lm(price~
bedrooms + bathrooms +
sqft_living + floors +
condition + sqft_above +
yr_built + urbanness +
waterfront + view,
data = model.data.train)
?predict
summary(model)
predictions <- predict(model, model.data.test, interval = "confidence")
realVpredictions <- as.data.frame("real price" = dataset$price,
"prediction:" = exp(predictions))
as.data.frame(
"real" = c(1,2,3),
"fake" = c(2,4,6)
)
summary(model)
predictions <- predict(model, model.data.test, interval = "confidence")
realVpredictions <- data.frame("real price" = dataset$price,
"prediction:" = exp(predictions))
summary(model)
predictions <- predict(model, model.data.test, interval = "confidence")
realVpredictions <- data.frame("real price" = model.data.test$price,
"prediction:" = exp(predictions))
View(realVpredictions)
summary(model)
predictions <- predict(model, model.data.test, interval = "confidence")
realVpredictions <- data.frame("real price" = exp(model.data.test$price),
"prediction:" = exp(predictions))
View(realVpredictions)
summary(model)
model = lm(price~
bedrooms + bathrooms +
sqft_living + floors +
condition + sqft_above +
yr_built + urbanness +
waterfront + view,
data = model.data.train)
summary(model)
predictions <- predict(model, model.data.test, interval = "confidence")
realVpredictions <- data.frame("real price" = exp(model.data.test$price),
"prediction:" = exp(predictions))
Head(realVpredictions)
predictions <- predict(model, model.data.test, interval = "confidence")
realVpredictions <- data.frame("real price" = exp(model.data.test$price),
"prediction:" = exp(predictions))
head(realVpredictions)
install.packages('rsconnect')
shiny::runGitHub("shiny-examples", "rstudio", subdir = "001-hello")
rsconnect::setAccountInfo(name='kpzzjc-mac-kongsomjit', token='974B753498660ADEE8017B778BAD788C', secret='wPvRd4Kv99Gw1CuytC2fdEdEW9fJ0C+0irzS16x/')
library(rsconnect)
rsconnect::setAccountInfo(name='kpzzjc-mac-kongsomjit', token='974B753498660ADEE8017B778BAD788C', secret='wPvRd4Kv99Gw1CuytC2fdEdEW9fJ0C+0irzS16x/')
source("C:/Users/user/Desktop/Prog-Projects/CS534_PROJ_DATASET/PROJECT/shiny_test.R")
source("C:/Users/user/Desktop/Prog-Projects/CS534_PROJ_DATASET/PROJECT/shiny_test.R")
runApp('DS_501_shiny')
runApp('DS_501_shiny')
runApp('DS_501_shiny')
shiny::runApp('DS_501_shiny')
runApp('DS_501_shiny')
runApp('DS_501_shiny')
